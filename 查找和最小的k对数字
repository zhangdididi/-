class Solution {
    class Pair implements Comparable<Pair>{
        public int n1;
        public int n2;
        public int sum;

        public Pair(int n1, int n2) {
            this.n1 = n1;
            this.n2 = n2;
            sum = n1 + n2;
        }

        public int compareTo(Pair o) {
            //this  other
            //如果希望this前， other后 ，返回 < 0
            //如果this后 ，other 前， 返回 > 0
            //相等返回0
            if (this.sum < o.sum) {
                return 1;
            }
            if (this.sum > o.sum) {
                return -1;
            }
            return 0;
        }
    }

    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        if (k < 1) return null;
        List<List<Integer>> res = new ArrayList<>();
        PriorityQueue<Pair> queue = new PriorityQueue<>();
        for (int i = 0; i < nums1.length && i < k; i++) {
            for (int j = 0; j < nums2.length && i < k; j++) {
                queue.offer(new Pair(nums1[i], nums2[j]));
                if (queue.size() > k) {
                    queue.poll();
                }
            }
        }
        //嵌套循环结束后，queue中就保存了k的数字对
        while (!queue.isEmpty()) {
            Pair pair = queue.poll();
            List<Integer> temp = new ArrayList<>();
            temp.add(pair.n1);
            temp.add(pair.n2);
            res.add(temp);
        }
        return res;
    }
}
